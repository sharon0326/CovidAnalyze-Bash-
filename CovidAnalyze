#!/bin/bash
#Name: Hetong Shen   ID: 260953511

errorMsg(){
        if [[ $1 == 1 ]]
        then
	        echo "Error $1: Procedure not provided"
	elif [[ $1 == 2 ]]
	then
		echo "Error $1: Wrong number of arguments"
	elif [[ $1 == 3 ]]
	then
		echo "Error $1: Input file name does not exist"
	fi

	echo "Script syntax: ./mkproj.sh optionalProjectName optionalInitialFiles"
	echo "Legal usage examples:"
	echo "./mkproj.sh"
	echo "./mkproj.sh mini2"
	echo "./mkproj.sh ../projects/mini2"
	echo "./mkproj.sh mini2 ../sources/*.sh"
	
}


if [[ $1 == "get" ]]
then
	if [[ $# != 4 ]]
	then
		error=2
		errorMsg $error
		exit
	fi
#	inputFile=$3
       
 	origin=$(pwd)
        if [[ $3 =~ "/" ]]
	then
		string=$3
		dirname=${string##*/}
		#               echo $dirname
		numb=$(echo -n $dirname | wc -c)
		numb=$((0 - numb - 1))
		#               echo $numb
		path=${string::$numb}
		#               echo $path
	else
		path="."
	fi
	#       echo "3 dirname: $dirname path: $path"
	cd $path
	array=$(ls)

	if [[ ! $array =~ $dirname ]]
	then
		error=3
		errorMsg $error
		exit
	fi
	cd $origin

	ID=$2; inputFile=$3; outputFile=$4;
	

        echo "" > $outputFile
	sed -i '/^$/d'  $outputFile
	awk -v id="$ID" -v outputFile="$outputFile"  'BEGIN {FS=","}{ if ($1 == id) {print $0 > outputFile } } ' < $inputFile

	numofrows=$(awk 'BEGIN {FS=","; countline=0}{ countline=countline+1 } END {OFS=","; print countline} ' < $outputFile)
	if [[ $numofrows == 0 ]]
	then
		numofrows=0; numconf=0; numdeath=0; numtest=0
	else
	numconf=$(awk -v numofrows="$numofrows" 'BEGIN {FS=","; numconf=0}{numconf=numconf+$6 } END {OFS=","; printf "%.*f\n", length($6), numconf / numofrows} ' < $outputFile)
        numdeath=$(awk -v numofrows="$numofrows" 'BEGIN {FS=","; numdeath=0}{numdeath=numdeath+$8 } END {OFS=","; printf "%.*f\n", length($8), numdeath / numofrows} ' < $outputFile)
        numtest=$(awk -v numofrows="$numofrows" 'BEGIN {FS=","; numtest=0}{numtest=numtest+$11 } END {OFS=","; printf "%.*f\n", length($11), numtest / numofrows} ' < $outputFile)
	fi
	echo "rowcount,avgconf,avgdeath,avgtests" >> $outputFile
	echo "$numofrows,$numconf,$numdeath,$numtest" >> $outputFile

elif [[ $1 == "compare" ]]
then
        if [[ $# != 5 ]]
        then
                error=2
                errorMsg $error
                exit
	fi
        origin=$(pwd)
	if [[ $3 =~ "/" ]]
	then
		string=$3
		dirname=${string##*/}
		#               echo $dirname
		numb=$(echo -n $dirname | wc -c)
		numb=$((0 - numb - 1))
		#               echo $numb
		path=${string::$numb}
		#               echo $path
	else
		path="."
	fi
	#       echo "3 dirname: $dirname path: $path"
	cd $path
	array=$(ls)

	if [[ ! $array =~ $dirname ]]
	then
		error=3
		errorMsg $error
		exit
	fi
	cd $origin

	ID=$2; inputFile=$3; outputFile=$4;compareFile=$5
        echo "" > $outputFile
        sed -i '/^$/d'  $outputFile
        awk -v id="$ID" -v outputFile="$outputFile"  'BEGIN {FS=","}{ if ($1 == id) {print $0 > outputFile } } ' < $inputFile

	numofrows=$(awk ' BEGIN {FS=","; countline=0}{ countline=countline+1 } END {OFS=","; print countline} ' < $outputFile)
        if [[ $numofrows == 0 ]]
	then
		numofrows=0; numconf=0; numdeath=0; numtest=0
	else 
	numconf=$(awk -v numofrows="$numofrows" 'BEGIN {FS=","; numconf=0}{numconf=numconf+$6 } END {OFS=","; printf "%.*f\n", length($6), numconf / numofrows} ' < $outputFile)
       	numdeath=$(awk -v numofrows="$numofrows" 'BEGIN {FS=","; numdeath=0}{numdeath=numdeath+$8 } END {OFS=","; printf "%.*f\n", length($8), numdeath / numofrows} ' < $outputFile)
        numtest=$(awk -v numofrows="$numofrows" 'BEGIN {FS=","; numtest=0}{numtest=numtest+$11 } END {OFS=","; printf "%.*f\n", length($11), numtest / numofrows} ' < $outputFile)
	fi
        numofrows2=$(awk ' BEGIN {FS=","; countline=0}{ countline=countline+1 } END {OFS=","; print countline} ' < $compareFile)
	exceplast2=$["$numofrows2-2"]
	cat $compareFile | head -n "$exceplast2" >> $outputFile	
  
	echo "rowcount,avgconf,avgdeath,avgtests" >> $outputFile
        echo "$numofrows,$numconf,$numdeath,$numtest" >> $outputFile
	
	cat $compareFile | tail -2 >> $outputFile
	
	lastline=$(cat $compareFile | tail -1)

	IFS="," read numofrows2 numconf2 numdeath2 numtest2 <<< "$lastline"
        diffcount=$[$numofrows - $numofrows2]
	diffavgconf=$(echo "$numconf $numconf2" | awk '{printf "%.2f \n", $1-$2}')
	diffavgdeath=$(echo "$numdeath $numdeath2" | awk '{printf "%.2f \n", $1-$2}')
	diffavgtests=$(echo "$numtest $numtest2" | awk '{printf "%.2f \n", $1-$2}')
	echo "diffcount,diffavgconf,diffavgdeath,diffavgtests" >> $outputFile
	echo "$diffcount,$diffavgconf,$diffavgdeath,$diffavgtests" >> $outputFile

elif [[ $1 == "-r" && $2 == "get" ]]
then
        if [[ $# != 7 ]]
        then
                error=2
                errorMsg $error
                exit
        fi
        origin=$(pwd)
	if [[ $6 =~ "/" ]]
	then
		string=$6
		dirname=${string##*/}
		#               echo $dirname
		numb=$(echo -n $dirname | wc -c)
		numb=$((0 - numb - 1))
		#               echo $numb
		path=${string::$numb}
		#               echo $path
	else
		path="."
	fi
	#       echo "3 dirname: $dirname path: $path"
	cd $path
	array=$(ls)

	if [[ ! $array =~ $dirname ]]
	then
		error=3
		errorMsg $error
		exit
	fi
	cd $origin

	id=$3;startdate=$4; enddate=$5; inputFile=$6; outputFile=$7
        echo "" > $outputFile
        sed -i '/^$/d'  $outputFile
	startyear=${startdate:0:4}
	startmonth=${startdate:5:2}
	endyear=${enddate:0:4}
	endmonth=${enddate:5:2}
#	echo $startyear, $startmonth, $endyear, $endmonth
#	echo $startdate, $enddate

	if [[ $startyear != $endyear ]]
	then
		a=$startyear # the year
		b=$startmonth # the start month
		c="12" # the ending month
		# assume every day range is 01 to 15 and 16 to 31
		startDay="01"
		endDay="15";
		
		while [ $b -le $c ]; do
		# 
		# do some AWK or SED work with startDay and endDay
		#    for i in $(seq $startDay $endDay)
		for i in $(seq $startDay $endDay)
		do
			newfile=newfile.csv
			selectdate=$a-$b-$i
	                awk -v selected="$selectdate" -v outputFile="$outputFile" -v id="$id" 'BEGIN {FS=","}{ if ($1 == id && $5 == selected) {print $0 >> outputFile } } ' < $inputFile
		        awk -v selected="$selectdate" -v outputFile="$newfile" -v id="$id" 'BEGIN {FS=","}{ if ($1 == id && $5 == selected) {print $0 >> outputFile } } ' < $inputFile
                  	checkex=$(awk -v selected="$selectdate" -v id="$id" 'BEGIN {FS=","}{ if ($1 == id && $5 == selected) {print $i} } ' < $inputFile)
			if [[ $checkex == "" ]]
			then
				echo "" >> $newfile
			fi
			sed -i '/^$/d'  $newfile
			if [[ $i == 15 || $i == 31 ]]
                        then
       				numofrows=$(awk 'BEGIN {FS=","; countline=0}{ countline=countline+1 } END {OFS=","; print countline} ' < $newfile)
                                if [[ $numofrows == 0 ]]
				then
	                                numofrows=0; numconf=0; numdeath=0; numtest=0
	                        else
				tnumconf=$(awk 'BEGIN {FS=","; numconf=0}{numconf=numconf+$6 } END {OFS=","; print numconf} ' < $newfile)                                                    numconf=$(echo "scale=3; $tnumconf/$numofrows" | bc )
				tnumdeath=$(awk 'BEGIN {FS=","; numdeath=0}{numdeath=numdeath+$8 } END {OFS=","; print numdeath} ' < $newfile)
                                numdeath=$(echo "scale=3; $tnumdeath/$numofrows" | bc )

                                tnumtest=$(awk 'BEGIN {FS=","; numtest=0}{numtest=numtest+$11 } END {OFS=","; print numtest} ' < $newfile)
                                numtest=$(echo "scale=3; $tnumtest/$numofrows" | bc )

				fi
		
				echo "$numofrows,$numconf,$numdeath,$numtest" >> tempfile1.csv
                                rm $newfile

                         fi

		done
		
			theNewStartDate=$a-$b-$startDay
			theNewEndDate=$a-$b-$endDay
			#echo "eachcycle"
#			echo $startDay, $endDay, $b, $c, $theNewStartDate, $theNewEndDate # === for testing
	
			if [ $startDay -eq "01" ]; then
				startDay="16"
				endDay="31"
			elif [ $startDay -eq "16" ]; then
				startDay="01"
				endDay="15"
				b=$(expr $b + 1)
			
				if [ ${#b} -lt 2 ]; then
					b=0$b # prepend the zero to b
				fi
			fi
		done

		d=$endyear # the year
		e="01" # the start month
		f=$endmonth # the ending month
		# assume every day range is 01 to 15 and 16 to 31
		startDay2="01"
		endDay2="15";
		
		while [ $e -le $f ]; do
		# 
		# do some AWK or SED work with startDay and endDay
		# 
		for i in $(seq $startDay2 $endDay2)
		do
			newfile=newfile.csv
			selectdate=$d-$e-$i
	         #       echo $selectdate
			awk -v selected="$selectdate" -v outputFile="$outputFile" -v id="$id" 'BEGIN {FS=","}{ if ($1 == id && $5 == selected) {print $0 >> outputFile } } ' < $inputFile
 			awk -v selected="$selectdate" -v outputFile="$newfile" -v id="$id" 'BEGIN {FS=","}{ if ($1 == id && $5 == selected) {print $0 >> outputFile } } ' < $inputFile
 			checkex=$(awk -v selected="$selectdate" -v id="$id" 'BEGIN {FS=","}{ if ($1 == id && $5 == selected) {print $i} } ' < $inputFile)
                        if [[ $checkex == "" ]]
	                then
				echo "" >> $newfile
			fi
                        sed -i '/^$/d'  $newfile

			if [[ $i == 15 || $i == 31 ]]
                        then
	                        numofrows=$(awk 'BEGIN {FS=","; countline=0}{ countline=countline+1 } END {OFS=","; print countline} ' < $newfile)
                                if [[ $numofrows == 0 ]]
			        then
					numofrows=0; numconf=0; numdeath=0; numtest=0
                                else
				tnumconf=$(awk 'BEGIN {FS=","; numconf=0}{numconf=numconf+$6 } END {OFS=","; print numconf} ' < $newfile)                                                    numconf=$(echo "scale=3; $tnumconf/$numofrows" | bc )
	                        tnumdeath=$(awk 'BEGIN {FS=","; numdeath=0}{numdeath=numdeath+$8 } END {OFS=","; print numdeath} ' < $newfile)
	                        numdeath=$(echo "scale=3; $tnumdeath/$numofrows" | bc )
				tnumtest=$(awk 'BEGIN {FS=","; numtest=0}{numtest=numtest+$11 } END {OFS=","; print numtest} ' < $newfile)
                                numtest=$(echo "scale=3; $tnumtest/$numofrows" | bc )
				
				fi
                                echo "$numofrows,$numconf,$numdeath,$numtest" >> tempfile2.csv
                                rm $newfile

                        fi
																			                     done

		        theNewStartDate=$d-$e-$startDay2
			theNewEndDate=$d-$e-$endDay2
		#	echo $startDay2, $endDay2, $e, $f, $theNewStartDate, $theNewEndDate # === for testing
		# 
		# now get the next day rage
		#
			if [ $startDay2 -eq "01" ]; then
				startDay2="16"
				endDay2="31"
			elif [ $startDay2 -eq "16" ]; then
				startDay2="01"
				endDay2="15"
				e=$(expr $e + 1)
	
				if [ ${#e} -lt 2 ]; then
					e=0$e # prepend the zero to $b
				fi
			fi
		done
	
	elif [[ $startyear == $endyear ]]
	then
		a=$startyear # the year
		b=$startmonth # the start month
		c=$endmonth # the ending month
		# assume every day range is 01 to 15 and 16 to 31
		startDay="01"
		endDay="15";
		
#		newdatafile=newdatafile.csv
#i	        echo "rowcount,avgconf,avgdeath,avgtests" >> $newdatafile
	
		while [ $b -le $c ]; do
			for i in $(seq $startDay $endDay)
			do
			newfile=newfile.csv
			selectdate=$a-$b-$i	
			awk -v selected="$selectdate" -v outputFile="$outputFile" -v id="$id" 'BEGIN {FS=","}{ if ($1 == id && $5 == selected) {print $0 >> outputFile } } ' < $inputFile
 			awk -v selected="$selectdate" -v outputFile="$newfile" -v id="$id" 'BEGIN {FS=","}{ if ($1 == id && $5 == selected) {print $0 >> outputFile } } ' < $inputFile
			checkex=$(awk -v selected="$selectdate" -v id="$id" 'BEGIN {FS=","}{ if ($1 == id && $5 == selected) {print $i} } ' < $inputFile)
                        if [[ $checkex == "" ]]
		        then
				echo "" >> $newfile
												                                
			fi
			sed -i '/^$/d'  $newfile	

			if [[ $i == 15 || $i == 31 ]]
			then
				numofrows=$(awk 'BEGIN {FS=","; countline=0}{ countline=countline+1 } END {OFS=","; print countline} ' < $newfile)
                                if [[ $numofrows == 0 ]]
		                then
					numofrows=0; numconf=0; numdeath=0; numtest=0
				else				
				tnumconf=$(awk 'BEGIN {FS=","; numconf=0}{numconf=numconf+$6 } END {OFS=","; print numconf} ' < $newfile)						     numconf=$(echo "scale=3; $tnumconf/$numofrows" | bc )
				
				tnumdeath=$(awk 'BEGIN {FS=","; numdeath=0}{numdeath=numdeath+$8 } END {OFS=","; print numdeath} ' < $newfile) 
				numdeath=$(echo "scale=3; $tnumdeath/$numofrows" | bc )
				
				tnumtest=$(awk 'BEGIN {FS=","; numtest=0}{numtest=numtest+$11 } END {OFS=","; print numtest} ' < $newfile)
  				numtest=$(echo "scale=3; $tnumtest/$numofrows" | bc )  
				fi
				
				echo "$numofrows,$numconf,$numdeath,$numtest" >> tempfile1.csv
				echo "" >> tempfile2.csv		
		    		rm $newfile		
			
			fi             

			done	
		

			theNewStartDate=$a-$b-$startDay
			theNewEndDate=$a-$b-$endDay
#			echo $startDay, $endDay, $b, $c, $theNewStartDate, $theNewEndDate # === for testing
			
			if [ $startDay -eq "01" ]; then
				startDay="16"
				endDay="31"
			elif [ $startDay -eq "16" ]; then
				startDay="01"
				endDay="15"
				b=$(expr $b + 1)
				if [ ${#b} -lt 2 ]; then
					b=0$b # prepend the zero to $b
				fi
			fi
		done
	fi
	echo "rowcount,avgconf,avgdeath,avgtests" >> $outputFile
	cat tempfile1.csv >> $outputFile
	cat tempfile2.csv >> $outputFile
	rm tempfile1.csv
	rm tempfile2.csv

elif [[ $1 == "-r" && $2 == "compare" ]]
then 
        if [[ $# != 8 ]]
        then
                error=2
                errorMsg $error
                exit
        fi
	origin=$(pwd)
	if [[ $6 =~ "/" ]]
	then
		string=$6
		dirname=${string##*/}
		#               echo $dirname
		numb=$(echo -n $dirname | wc -c)
		numb=$((0 - numb - 1))
		#               echo $numb
		path=${string::$numb}
		#               echo $path
	else
		path="."
	fi
	#       echo "3 dirname: $dirname path: $path"
	cd $path
	array=$(ls)

	if [[ ! $array =~ $dirname ]]
	then
		error=3
		errorMsg $error
		exit
	fi
	cd $origin

	id=$3;startdate=$4; enddate=$5; inputFile=$6; outputFile=$7; compFile=$8
	echo "" > $outputFile
        sed -i '/^$/d'  $outputFile
	startyear=${startdate:0:4}
        startmonth=${startdate:5:2}
        endyear=${enddate:0:4}
        endmonth=${enddate:5:2}
#        echo $startyear, $startmonth, $endyear, $endmonth
#        echo $startdate, $enddate
		if [[ $startyear != $endyear ]]
	        then
	                a=$startyear # the year
	                b=$startmonth # the start month
	                c="12" # the ending month
	                # assume every day range is 01 to 15 and 16 to 31
	                startDay="01"
		        endDay="15";
	                while [ $b -le $c ]; do
                        #
                        # do some AWK or SED work with startDay and endDay
	                #    for i in $(seq $startDay $endDay)
		        	for i in $(seq $startDay $endDay)
		                do
		                	newfile=newfile.csv
		                        selectdate=$a-$b-$i
		                        awk -v selected="$selectdate" -v outputFile="$outputFile" -v id="$id" 'BEGIN {FS=","}{ if ($1 == id && $5 == selected) {print $0 >> outputFile } } ' < $inputFile
		                        awk -v selected="$selectdate" -v outputFile="$newfile" -v id="$id" 'BEGIN {FS=","}{ if ($1 == id && $5 == selected) {print $0 >> outputFile } } ' < $inputFile
					checkex=$(awk -v selected="$selectdate" -v id="$id" 'BEGIN {FS=","}{ if ($1 == id && $5 == selected) {print $i} } ' < $inputFile)
			                if [[ $checkex == "" ]]
					then
						echo "" >> $newfile
					fi	
					sed -i '/^$/d'  $newfile		

					if [[ $i == 15 || $i == 31 ]]
		               		then
	                	                numofrows=$(awk 'BEGIN {FS=","; countline=0}{ countline=countline+1 } END {OFS=","; print countline} ' < $newfile)
		                                if [[ $numofrows == 0 ]]
	                                        then
	                                                numofrows=0; numconf=0; numdeath=0; numtest=0
	                                        else

	                        	        tnumconf=$(awk 'BEGIN {FS=","; numconf=0}{numconf=numconf+$6 } END {OFS=","; print numconf} ' < $newfile)                                                    numconf=$(echo "scale=3; $tnumconf/$numofrows" | bc )
	                                	tnumdeath=$(awk 'BEGIN {FS=","; numdeath=0}{numdeath=numdeath+$8 } END {OFS=","; print numdeath} ' < $newfile)
	                                 	numdeath=$(echo "scale=3; $tnumdeath/$numofrows" | bc )
	                                 	tnumtest=$(awk 'BEGIN {FS=","; numtest=0}{numtest=numtest+$11 } END {OFS=","; print numtest} ' < $newfile)
	                                 	numtest=$(echo "scale=3; $tnumtest/$numofrows" | bc )
						
						fi                                 
						
						echo "$numofrows,$numconf,$numdeath,$numtest" >> tempfile1.csv
 	                                 	rm $newfile
                       
					fi
		                  
				done
                        
			theNewStartDate=$a-$b-$startDay
                        theNewEndDate=$a-$b-$endDay
                        #echo "eachcycle"
#                        echo $startDay, $endDay, $b, $c, $theNewStartDate, $theNewEndDate # === for testing
                        if [ $startDay -eq "01" ]; then
                                startDay="16"
                                endDay="31"
                        elif [ $startDay -eq "16" ]; then
                                startDay="01"
                                endDay="15"
                                b=$(expr $b + 1)
                                if [ ${#b} -lt 2 ]; then
                                        b=0$b # prepend the zero to b
                                fi
                        fi
                done

                d=$endyear # the year
                e="01" # the start month
                f=$endmonth # the ending month
                # assume every day range is 01 to 15 and 16 to 31
                startDay2="01"
                endDay2="15";

                while [ $e -le $f ]; do
	        #
                # do some AWK or SED work with startDay and endDay
                #
	                for i in $(seq $startDay2 $endDay2)
	                do
	                        newfile=newfile.csv
	                        selectdate=$d-$e-$i
	                        #       echo $selectdate
                                awk -v selected="$selectdate" -v outputFile="$outputFile" -v id="$id" 'BEGIN {FS=","}{ if ($1 == id && $5 == selected) {print $0 >> outputFile } } ' < $inputFile
	                        awk -v selected="$selectdate" -v outputFile="$newfile" -v id="$id" 'BEGIN {FS=","}{ if ($1 == id && $5 == selected) {print $0 >> outputFile } } ' < $inputFile
				checkex=$(awk -v selected="$selectdate" -v id="$id" 'BEGIN {FS=","}{ if ($1 == id && $5 == selected) {print $i} } ' < $inputFile)
				if [[ $checkex == "" ]]
	                        then		
					echo "" >> $newfile
				fi

  				sed -i '/^$/d'  $newfile
 			      
			       if [[ $i == 15 || $i == 31 ]]
                               then
	                                numofrows=$(awk 'BEGIN {FS=","; countline=0}{ countline=countline+1 } END {OFS=","; print countline} ' < $newfile)
                                        if [[ $numofrows == 0 ]]
			                then
				                numofrows=0; numconf=0; numdeath=0; numtest=0
				        else

				   	tnumconf=$(awk 'BEGIN {FS=","; numconf=0}{numconf=numconf+$6 } END {OFS=","; print numconf} ' < $newfile)                                                    numconf=$(echo "scale=3; $tnumconf/$numofrows" | bc )
	                                tnumdeath=$(awk 'BEGIN {FS=","; numdeath=0}{numdeath=numdeath+$8 } END {OFS=","; print numdeath} ' < $newfile)
                                        numdeath=$(echo "scale=3; $tnumdeath/$numofrows" | bc )
                                        tnumtest=$(awk 'BEGIN {FS=","; numtest=0}{numtest=numtest+$11 } END {OFS=","; print numtest} ' < $newfile)
	                                numtest=$(echo "scale=3; $tnumtest/$numofrows" | bc )
				
					fi
				
					echo "$numofrows,$numconf,$numdeath,$numtest" >> tempfile2.csv
	                                rm $newfile
	                        fi
                done			
                        theNewStartDate=$d-$e-$startDay2
                        theNewEndDate=$d-$e-$endDay2
 #                       echo $startDay2, $endDay2, $e, $f, $theNewStartDate, $theNewEndDate # === for testing
	                #
	                # now get the next day rage
	                #
                        if [ $startDay2 -eq "01" ]; then
                                startDay2="16"
                                endDay2="31"
                        elif [ $startDay2 -eq "16" ]; then
                                startDay2="01"
                                endDay2="15"
                                e=$(expr $e + 1)
                                if [ ${#e} -lt 2 ]; then
                                        e=0$e # prepend the zero to $b
                                fi
                        fi
	done

	elif [[ $startyear == $endyear ]]
        then
		a=$startyear # the year
		b=$startmonth # the start mont
		c=$endmonth # the ending month
		# assume every day range is 01 to 15 and 16 to 31
		startDay="01"
		endDay="15";
		#               newdatafile=newdatafile.csv  														     #i              echo "rowcount,avgconf,avgdeath,avgtests" >> $newdatafile
      		while [ $b -le $c ]; do
	                for i in $(seq $startDay $endDay)
	                do
	                        newfile=newfile.csv
	                        selectdate=$a-$b-$i
	                        awk -v selected="$selectdate" -v outputFile="$outputFile" -v id="$id" 'BEGIN {FS=","}{ if ($1 == id && $5 == selected) {print $0 >> outputFile } } ' < $inputFile
	                        awk -v selected="$selectdate" -v outputFile="$newfile" -v id="$id" 'BEGIN {FS=","}{ if ($1 == id && $5 == selected) {print $0 >> outputFile } } ' < $inputFile
				checkex=$(awk -v selected="$selectdate" -v id="$id" 'BEGIN {FS=","}{ if ($1 == id && $5 == selected) {print $i} } ' < $inputFile)
				if [[ $checkex == "" ]]
				then
					echo "" >> $newfile
				fi
				
				sed -i '/^$/d'  $newfile
				
				if [[ $i == 15 || $i == 31 ]]
	                        then
		                        
		                        numofrows=$(awk 'BEGIN {FS=","; countline=0}{ countline=countline+1 } END {OFS=","; print countline} ' < $newfile)
					
					if [[ $numofrows == 0 ]]
					then
						numofrows=0; numconf=0; numdeath=0; numtest=0
					else


					tnumconf=$(awk 'BEGIN {FS=","; numconf=0}{numconf=numconf+$6 } END {OFS=","; print numconf} ' < $newfile)                                                    numconf=$(echo "scale=3; $tnumconf/$numofrows" | bc )
	                                tnumdeath=$(awk 'BEGIN {FS=","; numdeath=0}{numdeath=numdeath+$8 } END {OFS=","; print numdeath} ' < $newfile)
	                                numdeath=$(echo "scale=3; $tnumdeath/$numofrows" | bc )
	                                tnumtest=$(awk 'BEGIN {FS=","; numtest=0}{numtest=numtest+$11 } END {OFS=","; print numtest} ' < $newfile)
	                                numtest=$(echo "scale=3; $tnumtest/$numofrows" | bc )
	                                
					fi
								
					echo "$numofrows,$numconf,$numdeath,$numtest" >> tempfile1.csv
	                                echo "" >> tempfile2.csv
	                                rm $newfile
				fi
			done
			
			theNewStartDate=$a-$b-$startDay
                        theNewEndDate=$a-$b-$endDay
 #                       echo $startDay, $endDay, $b, $c, $theNewStartDate, $theNewEndDate # === for testing
                        if [ $startDay -eq "01" ]; then
                                startDay="16"
                                endDay="31"
	                        elif [ $startDay -eq "16" ]; then
	                                startDay="01"
	                                endDay="15"
	                                b=$(expr $b + 1)
	                                if [ ${#b} -lt 2 ]; then
	                                        b=0$b # prepend the zero to $b
	                                fi
			fi
               done
       fi

#       echo "rowcount,avgconf,avgdeath,avgtests" >> $outputFile
       cat tempfile1.csv >> extractstats.csv
       cat tempfile2.csv >> extractstats.csv
       rm tempfile1.csv
       rm tempfile2.csv
       sed -i '/^$/d'  extractstats.csv

       linem=$(grep -n 'rowcount' $compFile)
       linenum=$(echo "${linem//[!0-9]/}")
#       echo $linenum

       awk -v outputFile="$outputFile" -v linenum="$linenum" 'BEGIN {FS=","}{ if (NR < linenum) {print $0 >> outputFile } } ' < $compFile
       awk -v outputFile="compstats.csv" -v linenum="$linenum" 'BEGIN {FS=","}{ if (NR > linenum) {print $0 >> outputFile } } ' < $compFile
       sed -i '/^$/d'  compstats.csv
       
       linenuminstats=$(awk 'END{print NR}' < compstats.csv)
  #     echo $linenuminstats
       for j in $(seq 1 $linenuminstats)
       do
	
	       compone=$(awk -v linenuminstats="$j" 'BEGIN {FS=","}{ if (NR == linenuminstats) {print $1} } ' < compstats.csv)
	       extractone=$(awk -v linenuminstats="$j" 'BEGIN {FS=","}{ if (NR == linenuminstats) {print $1} } ' < extractstats.csv)
	       
	       comptwo=$(awk -v linenuminstats="$j" 'BEGIN {FS=","}{ if (NR == linenuminstats) {print $2} } ' < compstats.csv)
	       extracttwo=$(awk -v linenuminstats="$j" 'BEGIN {FS=","}{ if (NR == linenuminstats) {print $2} } ' < extractstats.csv)
		 
	       compthree=$(awk -v linenuminstats="$j" 'BEGIN {FS=","}{ if (NR == linenuminstats) {print $3} } ' < compstats.csv)
      	       extracthree=$(awk -v linenuminstats="$j" 'BEGIN {FS=","}{ if (NR == linenuminstats) {print $3} } ' < extractstats.csv)
	  
	       compfour=$(awk -v linenuminstats="$j" 'BEGIN {FS=","}{ if (NR == linenuminstats) {print $4} } ' < compstats.csv)
               extractfour=$(awk -v linenuminstats="$j" 'BEGIN {FS=","}{ if (NR == linenuminstats) {print $4} } ' < extractstats.csv)

	       diffcount=$(($extractone - $compone))
	       diffavgconf=$(echo "$extracttwo $comptwo" | awk '{printf "%.2f \n", $1-$2}')
	       diffavgdeath=$(echo "$extracthree $compthree" | awk '{printf "%.2f \n", $1-$2}')
	       diffavgtests=$(echo "$extractfour $compfour" | awk '{printf "%.2f \n", $1-$2}')
	       echo "$diffcount,$diffavgconf,$diffavgdeath,$diffavgtests" >> diffstats.csv
       done

       echo "rowcount,avgconf,avgdeath,avgtests" >> $outputFile
       cat extractstats.csv >> $outputFile
       echo "rowcount,avgconf,avgdeath,avgtests" >> $outputFile
       cat compstats.csv >> $outputFile
       echo "diffcount,diffavgconf,difavgdeath,diffavgtests" >> $outputFile
       cat diffstats.csv >> $outputFile
						     
       rm extractstats.csv
       rm compstats.csv
       rm diffstats.csv
else
	error=1
	errorMsg $error
	exit
fi




